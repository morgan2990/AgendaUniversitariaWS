<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>untref.ingenieriaSoftware</groupId>
	<artifactId>AgendaUniversitariaWS</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>Agenda Universitaria</name>
	<dependencies>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq</artifactId>
			<version>3.4.2</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-meta</artifactId>
			<version>3.4.2</version>
		</dependency>
		<dependency>
			<groupId>org.jooq</groupId>
			<artifactId>jooq-codegen</artifactId>
			<version>3.4.2</version>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.3-1102-jdbc41</version>
		</dependency>

	</dependencies>
	<build>
		<plugins>
			<plugin>

				<!-- Specify the maven code generator plugin -->
				<groupId>org.jooq</groupId>
				<artifactId>jooq-codegen-maven</artifactId>
				<version>3.4.2</version>

				<!-- The plugin should hook into the generate goal -->
				<executions>
					<execution>
						<goals>
							<goal>generate</goal>
						</goals>
					</execution>
				</executions>

				<!-- Manage the plugin's dependency. In this example, we'll use a PostgreSQL 
					database -->
				<dependencies>
					<dependency>
						<groupId>postgresql</groupId>
						<artifactId>postgresql</artifactId>
						<version>8.4-702.jdbc4</version>
					</dependency>
				</dependencies>

				<!-- Specify the plugin configuration. The configuration format is the 
					same as for the standalone code generator -->
				<configuration>

					<!-- JDBC connection parameters -->
					<jdbc>
						<driver>org.postgresql.Driver</driver>
						<url>jdbc:postgresql://localhost:5432/agendaUniversitaria</url>
						<user>postgres</user>
						<password>test</password>
					</jdbc>

					<!-- Generator parameters -->
					<generator>

						<database>
							<name>org.jooq.util.postgres.PostgresDatabase</name>
							<includes>.*</includes>
							<excludes></excludes>
							<inputSchema>agenda</inputSchema>
						</database>
						<target>
							<packageName>org.untref.agendauniversitaria</packageName>
							<directory>src/main/java</directory>
						</target>
						<generate>
							<!-- Generation flags: See advanced configuration properties -->
							<daos>false</daos>
							<!-- Generate jOOQ Record classes for type-safe querying. You can 
								turn this off, if you don't need "active records" for CRUD Defaults to true -->
							<records>true</records>
							<!-- Generate POJOs in addition to Record classes for usage of the 
								ResultQuery.fetchInto(Class) API Defaults to false -->
							<pojos>true</pojos>
							<!-- Generate immutable POJOs for usage of the ResultQuery.fetchInto(Class) 
								API This overrides any value set in <pojos/> Defaults to false -->
							<immutablePojos>false</immutablePojos>
							<!-- Generate interfaces that will be implemented by records and/or 
								pojos. You can also use these interfaces in Record.into(Class<?>) and similar 
								methods, to let jOOQ return proxy objects for them. Defaults to false -->
							<interfaces>false</interfaces>

						</generate>
					</generator>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.jooq</groupId>
										<artifactId>
											jooq-codegen-maven
										</artifactId>
										<versionRange>
											[3.4.2,)
										</versionRange>
										<goals>
											<goal>generate</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>